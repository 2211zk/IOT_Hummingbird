// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.26.1
// source: api/dashboard/v1/dashboard.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDashboardAlarmStat = "/dashboard.v1.Dashboard/AlarmStat"
const OperationDashboardDeviceMessageCount = "/dashboard.v1.Dashboard/DeviceMessageCount"
const OperationDashboardOverview = "/dashboard.v1.Dashboard/Overview"
const OperationDashboardResource = "/dashboard.v1.Dashboard/Resource"

type DashboardHTTPServer interface {
	// AlarmStat 告警统计
	AlarmStat(context.Context, *AlarmStatRequest) (*AlarmStatReply, error)
	// DeviceMessageCount 设备消息统计
	DeviceMessageCount(context.Context, *DeviceMessageCountRequest) (*DeviceMessageCountReply, error)
	// Overview 平台概述
	Overview(context.Context, *OverviewRequest) (*OverviewReply, error)
	// Resource 资源状态
	Resource(context.Context, *ResourceRequest) (*ResourceReply, error)
}

func RegisterDashboardHTTPServer(s *http.Server, srv DashboardHTTPServer) {
	r := s.Route("/")
	r.GET("/api/dashboard/overview", _Dashboard_Overview0_HTTP_Handler(srv))
	r.GET("/api/dashboard/resource", _Dashboard_Resource0_HTTP_Handler(srv))
	r.GET("/api/dashboard/alarm-stat", _Dashboard_AlarmStat0_HTTP_Handler(srv))
	r.GET("/api/dashboard/device-message-count", _Dashboard_DeviceMessageCount0_HTTP_Handler(srv))
}

func _Dashboard_Overview0_HTTP_Handler(srv DashboardHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OverviewRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDashboardOverview)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Overview(ctx, req.(*OverviewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OverviewReply)
		return ctx.Result(200, reply)
	}
}

func _Dashboard_Resource0_HTTP_Handler(srv DashboardHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ResourceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDashboardResource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Resource(ctx, req.(*ResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResourceReply)
		return ctx.Result(200, reply)
	}
}

func _Dashboard_AlarmStat0_HTTP_Handler(srv DashboardHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AlarmStatRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDashboardAlarmStat)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AlarmStat(ctx, req.(*AlarmStatRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AlarmStatReply)
		return ctx.Result(200, reply)
	}
}

func _Dashboard_DeviceMessageCount0_HTTP_Handler(srv DashboardHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeviceMessageCountRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDashboardDeviceMessageCount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeviceMessageCount(ctx, req.(*DeviceMessageCountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeviceMessageCountReply)
		return ctx.Result(200, reply)
	}
}

type DashboardHTTPClient interface {
	AlarmStat(ctx context.Context, req *AlarmStatRequest, opts ...http.CallOption) (rsp *AlarmStatReply, err error)
	DeviceMessageCount(ctx context.Context, req *DeviceMessageCountRequest, opts ...http.CallOption) (rsp *DeviceMessageCountReply, err error)
	Overview(ctx context.Context, req *OverviewRequest, opts ...http.CallOption) (rsp *OverviewReply, err error)
	Resource(ctx context.Context, req *ResourceRequest, opts ...http.CallOption) (rsp *ResourceReply, err error)
}

type DashboardHTTPClientImpl struct {
	cc *http.Client
}

func NewDashboardHTTPClient(client *http.Client) DashboardHTTPClient {
	return &DashboardHTTPClientImpl{client}
}

func (c *DashboardHTTPClientImpl) AlarmStat(ctx context.Context, in *AlarmStatRequest, opts ...http.CallOption) (*AlarmStatReply, error) {
	var out AlarmStatReply
	pattern := "/api/dashboard/alarm-stat"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDashboardAlarmStat))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DashboardHTTPClientImpl) DeviceMessageCount(ctx context.Context, in *DeviceMessageCountRequest, opts ...http.CallOption) (*DeviceMessageCountReply, error) {
	var out DeviceMessageCountReply
	pattern := "/api/dashboard/device-message-count"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDashboardDeviceMessageCount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DashboardHTTPClientImpl) Overview(ctx context.Context, in *OverviewRequest, opts ...http.CallOption) (*OverviewReply, error) {
	var out OverviewReply
	pattern := "/api/dashboard/overview"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDashboardOverview))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DashboardHTTPClientImpl) Resource(ctx context.Context, in *ResourceRequest, opts ...http.CallOption) (*ResourceReply, error) {
	var out ResourceReply
	pattern := "/api/dashboard/resource"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDashboardResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
