// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: api/dashboard/v1/dashboard.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Dashboard_Overview_FullMethodName           = "/dashboard.v1.Dashboard/Overview"
	Dashboard_Resource_FullMethodName           = "/dashboard.v1.Dashboard/Resource"
	Dashboard_AlarmStat_FullMethodName          = "/dashboard.v1.Dashboard/AlarmStat"
	Dashboard_DeviceMessageCount_FullMethodName = "/dashboard.v1.Dashboard/DeviceMessageCount"
)

// DashboardClient is the client API for Dashboard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 首页仪表盘服务
type DashboardClient interface {
	// 平台概述
	Overview(ctx context.Context, in *OverviewRequest, opts ...grpc.CallOption) (*OverviewReply, error)
	// 资源状态
	Resource(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*ResourceReply, error)
	// 告警统计
	AlarmStat(ctx context.Context, in *AlarmStatRequest, opts ...grpc.CallOption) (*AlarmStatReply, error)
	// 设备消息统计
	DeviceMessageCount(ctx context.Context, in *DeviceMessageCountRequest, opts ...grpc.CallOption) (*DeviceMessageCountReply, error)
}

type dashboardClient struct {
	cc grpc.ClientConnInterface
}

func NewDashboardClient(cc grpc.ClientConnInterface) DashboardClient {
	return &dashboardClient{cc}
}

func (c *dashboardClient) Overview(ctx context.Context, in *OverviewRequest, opts ...grpc.CallOption) (*OverviewReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OverviewReply)
	err := c.cc.Invoke(ctx, Dashboard_Overview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) Resource(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*ResourceReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResourceReply)
	err := c.cc.Invoke(ctx, Dashboard_Resource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) AlarmStat(ctx context.Context, in *AlarmStatRequest, opts ...grpc.CallOption) (*AlarmStatReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlarmStatReply)
	err := c.cc.Invoke(ctx, Dashboard_AlarmStat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) DeviceMessageCount(ctx context.Context, in *DeviceMessageCountRequest, opts ...grpc.CallOption) (*DeviceMessageCountReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceMessageCountReply)
	err := c.cc.Invoke(ctx, Dashboard_DeviceMessageCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DashboardServer is the server API for Dashboard service.
// All implementations must embed UnimplementedDashboardServer
// for forward compatibility.
//
// 首页仪表盘服务
type DashboardServer interface {
	// 平台概述
	Overview(context.Context, *OverviewRequest) (*OverviewReply, error)
	// 资源状态
	Resource(context.Context, *ResourceRequest) (*ResourceReply, error)
	// 告警统计
	AlarmStat(context.Context, *AlarmStatRequest) (*AlarmStatReply, error)
	// 设备消息统计
	DeviceMessageCount(context.Context, *DeviceMessageCountRequest) (*DeviceMessageCountReply, error)
	mustEmbedUnimplementedDashboardServer()
}

// UnimplementedDashboardServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDashboardServer struct{}

func (UnimplementedDashboardServer) Overview(context.Context, *OverviewRequest) (*OverviewReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Overview not implemented")
}
func (UnimplementedDashboardServer) Resource(context.Context, *ResourceRequest) (*ResourceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resource not implemented")
}
func (UnimplementedDashboardServer) AlarmStat(context.Context, *AlarmStatRequest) (*AlarmStatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlarmStat not implemented")
}
func (UnimplementedDashboardServer) DeviceMessageCount(context.Context, *DeviceMessageCountRequest) (*DeviceMessageCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceMessageCount not implemented")
}
func (UnimplementedDashboardServer) mustEmbedUnimplementedDashboardServer() {}
func (UnimplementedDashboardServer) testEmbeddedByValue()                   {}

// UnsafeDashboardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DashboardServer will
// result in compilation errors.
type UnsafeDashboardServer interface {
	mustEmbedUnimplementedDashboardServer()
}

func RegisterDashboardServer(s grpc.ServiceRegistrar, srv DashboardServer) {
	// If the following call pancis, it indicates UnimplementedDashboardServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Dashboard_ServiceDesc, srv)
}

func _Dashboard_Overview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).Overview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_Overview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).Overview(ctx, req.(*OverviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_Resource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).Resource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_Resource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).Resource(ctx, req.(*ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_AlarmStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlarmStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).AlarmStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_AlarmStat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).AlarmStat(ctx, req.(*AlarmStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_DeviceMessageCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceMessageCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).DeviceMessageCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_DeviceMessageCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).DeviceMessageCount(ctx, req.(*DeviceMessageCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dashboard_ServiceDesc is the grpc.ServiceDesc for Dashboard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dashboard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dashboard.v1.Dashboard",
	HandlerType: (*DashboardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Overview",
			Handler:    _Dashboard_Overview_Handler,
		},
		{
			MethodName: "Resource",
			Handler:    _Dashboard_Resource_Handler,
		},
		{
			MethodName: "AlarmStat",
			Handler:    _Dashboard_AlarmStat_Handler,
		},
		{
			MethodName: "DeviceMessageCount",
			Handler:    _Dashboard_DeviceMessageCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/dashboard/v1/dashboard.proto",
}
