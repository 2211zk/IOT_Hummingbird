// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: equipment.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Equipment_ProductsList_FullMethodName = "/equipment.v1.Equipment/ProductsList"
)

// EquipmentClient is the client API for Equipment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The greeting service definition.
type EquipmentClient interface {
	// Sends a greeting
	ProductsList(ctx context.Context, in *ProductsListReq, opts ...grpc.CallOption) (*ProductsListResp, error)
}

type equipmentClient struct {
	cc grpc.ClientConnInterface
}

func NewEquipmentClient(cc grpc.ClientConnInterface) EquipmentClient {
	return &equipmentClient{cc}
}

func (c *equipmentClient) ProductsList(ctx context.Context, in *ProductsListReq, opts ...grpc.CallOption) (*ProductsListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductsListResp)
	err := c.cc.Invoke(ctx, Equipment_ProductsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EquipmentServer is the server API for Equipment service.
// All implementations must embed UnimplementedEquipmentServer
// for forward compatibility.
//
// The greeting service definition.
type EquipmentServer interface {
	// Sends a greeting
	ProductsList(context.Context, *ProductsListReq) (*ProductsListResp, error)
	mustEmbedUnimplementedEquipmentServer()
}

// UnimplementedEquipmentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEquipmentServer struct{}

func (UnimplementedEquipmentServer) ProductsList(context.Context, *ProductsListReq) (*ProductsListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductsList not implemented")
}
func (UnimplementedEquipmentServer) mustEmbedUnimplementedEquipmentServer() {}
func (UnimplementedEquipmentServer) testEmbeddedByValue()                   {}

// UnsafeEquipmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EquipmentServer will
// result in compilation errors.
type UnsafeEquipmentServer interface {
	mustEmbedUnimplementedEquipmentServer()
}

func RegisterEquipmentServer(s grpc.ServiceRegistrar, srv EquipmentServer) {
	// If the following call pancis, it indicates UnimplementedEquipmentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Equipment_ServiceDesc, srv)
}

func _Equipment_ProductsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductsListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServer).ProductsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Equipment_ProductsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServer).ProductsList(ctx, req.(*ProductsListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Equipment_ServiceDesc is the grpc.ServiceDesc for Equipment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Equipment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "equipment.v1.Equipment",
	HandlerType: (*EquipmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProductsList",
			Handler:    _Equipment_ProductsList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "equipment.proto",
}
